/*
There are N network nodes, labelled 1 to N.

Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

 

Example 1:



Input: times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
Output: 2
 

Note:

N will be in the range [1, 100].
K will be in the range [1, N].
The length of times will be in the range [1, 6000].
All edges times[i] = (u, v, w) will have 1 <= u, v <= N and 0 <= w <= 100.
*/

// Hint: Relax all edges n - 1 times
// Time: O(VE)
// Space: O(V)

class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        if (times == null || times.length == 0) {
            return 0;
        }
        
        int[] dists = new int[N];
        Arrays.fill(dists, Integer.MAX_VALUE);
        dists[K - 1] = 0;
        
        for (int i = 1; i < N; i++) {
            for (int[] t : times) {
                int u = t[0] - 1;
                int v = t[1] - 1;
                int w = t[2];
                if (dists[u] != Integer.MAX_VALUE) {
                    if (dists[v] == Integer.MAX_VALUE || dists[v] > dists[u] + w) {
                        dists[v] = dists[u] + w;
                    }
                }
            }
        }
        
        int res = 0;
        for (int d : dists) {
            res = Math.max(d, res);
        }
        
        return res == Integer.MAX_VALUE ? -1 : res;
    }
}
