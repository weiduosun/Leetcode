// solution 1:
// Credit to Tianyu Liu
// Divide and concur
// runtime: O(n)
// space: O(n)
// Example:
Input: root = [4,2,6,1,3,5,7], V = 2
Output: [[2,1],[4,3,6,null,null,5,7]]
Explanation:
Note that root, output[0], and output[1] are TreeNode objects, not arrays.

The given tree [4,2,6,1,3,5,7] is represented by the following diagram:

          4
        /   \
      2      6
     / \    / \
    1   3  5   7

while the diagrams for the outputs are:

          4
        /   \
      3      6      and    2
            / \           /
           5   7         1

Assume res[0] always keeps the values that are larger than the target,
       res[1] always keeps the values that are smaller than the target.

When root.val = 2, res[0] = 1, res[1] = 3 ==> left
When root.val = 6, res[0] = null, res[1] = 6  ==> right
                                          / \
                                         5   7
When root.val = 4, root.left = left[1], root.right = right[1]
return {res[0], root}
                 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode[] splitBST(TreeNode root, int V) {
        TreeNode[] res = new TreeNode[2];
        if (root == null) {
            return res;
        }
        
        TreeNode[] left = splitBST(root.left, V);
        TreeNode[] right = splitBST(root.right, V);
        
        if (root.val > V) {
            root.right = right[1];
            root.left = left[1];
            res[0] = left[0];
            res[1] = root;
        } else {
            root.right = right[0];
            root.left = left[0];
            res[0] = root;
            res[1] = right[1];
        }
        
        return res;
    }
}
