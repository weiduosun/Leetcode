// solution 1:
// iterative
// runtime: O(n) increasing sequence
// space: O(1)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode insertIntoMaxTree(TreeNode root, int val) {
        TreeNode node = new TreeNode(val);
        
        if (root == null) {
            return node;
        }
        
        if (val > root.val) {
            node.left = root;
            return node;
        }
        
        TreeNode prev = root;
        TreeNode cur = root;
        while (cur != null && cur.val > val) {
            prev = cur;
            cur = cur.right;
        }
        
        prev.right = node;
        node.left = cur;
        
        return root;
    }
}

// solution 2:
// recursion
// runtime: O(n) increasing sequence
// space: O(n) recursion stack space

class Solution {
    public TreeNode insertIntoMaxTree(TreeNode root, int val) {
        if (root == null || root.val < val) {
            TreeNode node = new TreeNode(val);
            node.left = root;
            return node;
        }
        
        root.right = insertIntoMaxTree(root.right, val);
        
        return root;
    }
}
