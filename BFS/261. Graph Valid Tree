/*
Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true
Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.
*/

// Hint: Check if one connected component and n - 1 edges
// Time: O(E+V)
// Space: O(E+V)

class Solution {
    public boolean validTree(int n, int[][] edges) {
        if (edges == null || n < 0) {
            return false;
        }
        
        if (n != edges.length + 1) {
            return false;
        }
        
        Map<Integer, Set<Integer>> map = buildGraph(n, edges);
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> set = new HashSet<>();
        queue.offer(0);
        set.add(0);
        
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            for (int nei : map.get(cur)) {
                if (!set.contains(nei)) {
                    set.add(nei);
                    queue.offer(nei);
                }
            }
        }
        
        return set.size() == n;
    }
    
    private Map<Integer, Set<Integer>> buildGraph(int n, int[][] edges) {
        Map<Integer, Set<Integer>> map = new HashMap<>();
        
        for (int i = 0; i < n; i++) {
            map.put(i, new HashSet<>());
        }
        
        for (int[] e : edges) {
            map.get(e[0]).add(e[1]);
            map.get(e[1]).add(e[0]);
        }
        
        return map;
    }
}
