/*
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following 3-ary tree

 



 

as [1 [3[5 6] 2 4]]. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

 

Note:

N is in the range of [1, 1000]
Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
*/

// Hint: Double queue: one for nodes, one for the number of children of each nodes
// Time: O(n)
// Space: O(n)

// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Codec {
    
    // Encodes a tree to a single string.
    public String serialize(Node root) {
        if (root == null) {
            return "";
        }
        
        StringBuilder builder = new StringBuilder();
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()) {
            Node cur = queue.poll();
            if (cur == null) {
                builder.append("#,");
            } else {
                // Record the size of children at the same time!!!
                builder.append(cur.val + "<" + cur.children.size() + ">,");
                for (Node n : cur.children) {
                    queue.offer(n);
                }
            }
        }
        
        builder.deleteCharAt(builder.length() - 1);
        
        return builder.toString();
    }

    // Decodes your encoded data to tree.
    public Node deserialize(String data) {
        if (data.equals("")) {
            return null;
        }
        
        String[] strs = data.split(",");
        int val = Integer.valueOf(strs[0].substring(0, strs[0].indexOf('<')));
        // Decode the size of children!!!
        int size = Integer.valueOf(strs[0].substring(strs[0].indexOf('<') + 1, strs[0].indexOf('>')));
        Node root = new Node(val, new ArrayList<>());
        int index = 1;
        Queue<Node> nodes = new LinkedList<>();
        Queue<Integer> counts = new LinkedList<>();
        nodes.offer(root);
        counts.offer(size);
        
        while (!nodes.isEmpty()) {
            Node cur = nodes.poll();
            int count = counts.poll();
            for (int i = 0; i < count; i++) {
                String temp = strs[index++];
                if (!temp.equals("#")) {
                    val = Integer.valueOf(temp.substring(0, temp.indexOf('<')));
                    counts.offer(Integer.valueOf(temp.substring(temp.indexOf('<') + 1, temp.indexOf('>'))));
                    Node newNode = new Node(val, new ArrayList<>());
                    cur.children.add(newNode);
                    nodes.offer(newNode);
                }

            }
        }
        
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
