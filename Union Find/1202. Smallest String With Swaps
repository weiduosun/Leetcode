/*
You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.

You can swap the characters at any pair of indices in the given pairs any number of times.

Return the lexicographically smallest string that s can be changed to after using the swaps.

 

Example 1:

Input: s = "dcab", pairs = [[0,3],[1,2]]
Output: "bacd"
Explaination: 
Swap s[0] and s[3], s = "bcad"
Swap s[1] and s[2], s = "bacd"
Example 2:

Input: s = "dcab", pairs = [[0,3],[1,2],[0,2]]
Output: "abcd"
Explaination: 
Swap s[0] and s[3], s = "bcad"
Swap s[0] and s[2], s = "acbd"
Swap s[1] and s[2], s = "abcd"
Example 3:

Input: s = "cba", pairs = [[0,1],[1,2]]
Output: "abc"
Explaination: 
Swap s[0] and s[1], s = "bca"
Swap s[1] and s[2], s = "bac"
Swap s[0] and s[1], s = "abc"
 

Constraints:

1 <= s.length <= 10^5
0 <= pairs.length <= 10^5
0 <= pairs[i][0], pairs[i][1] < s.length
s only contains lower case English letters.
*/

// Time: O(n2lgn) Space: O(n)

class Solution {
    class UnionFind {
        int n;
        int[] rank;
        int[] parent;
        
        public UnionFind(int n) {
            this.n = n;
            rank = new int[n];
            parent = new int[n];
            
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        
        public int find(int i) {
            if (i != parent[i]) {
                parent[i] = find(parent[i]);
            }
            return parent[i];
        }
        
        public void union(int i, int j) {
            if (rank[i] < rank[j]) {
                parent[i] = j;
            } else if (rank[i] > rank[j]) {
                parent[j] = i;
            } else {
                parent[i] = j;
                rank[j]++;
            }
        }
    }
    
    public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
        int n = s.length();
        UnionFind uf = new UnionFind(n);
        
        // Union index!!!
        for (List<Integer> p : pairs) {
            int a = uf.find(p.get(0));
            int b = uf.find(p.get(1));
            if (a != b) {
                uf.union(a, b);
            }
        }
        
        // Direct to ancestry
        for (int i = 0; i < n; i++) {
            uf.find(i);
        }
        
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.putIfAbsent(uf.parent[i], new ArrayList<>());
            map.get(uf.parent[i]).add(i);
        }
        
        char[] chars = s.toCharArray();
        char[] res = new char[n];
        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {
            List<Character> temp = new ArrayList<>();
            List<Integer> indexes = entry.getValue();
            for (int i : indexes) {
                temp.add(chars[i]);
            }
            Collections.sort(temp);
            for (int i = 0; i < temp.size(); i++) {
                res[indexes.get(i)] = temp.get(i);
            }
        }
        
        return new String(res);
    }
}
