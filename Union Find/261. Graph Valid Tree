/*
Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true
Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.
*/

// Hint: Check if one connected component and no redundant edges.
// Time: O(E+V)
// Space: O(V)

class Solution {
    public class UnionFind {
        int[] parent;
        int[] rank;
        int n;
        int numOfConnectedComponents;
        
        public UnionFind(int n) {
            this.n = n;
            this.numOfConnectedComponents = n;
            this.parent = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
            this.rank = new int[n];
        }
        
        public int find(int i) {
            if (i != parent[i]) {
                parent[i] = find(parent[i]);
            }
            return parent[i];
        }
        
        public void union(int i, int j) {
            if (rank[i] < rank[j]) {
                parent[i] = j;
            } else if (rank[i] > rank[j]) {
                parent[j] = i;
            } else {
                parent[i] = j;
                rank[j]++;
            }
            numOfConnectedComponents--;
        }
        
        public int getNumOfConnectedComponents() {
            return this.numOfConnectedComponents;
        }
    }
    
    public boolean validTree(int n, int[][] edges) {
        if (edges == null || n < 0) {
            return false;
        }
        
        UnionFind uf = new UnionFind(n);
        
        for (int[] e : edges) {
            int a = uf.find(e[0]);
            int b = uf.find(e[1]);
            if (a != b) {
                uf.union(a, b);
            } else {
                return false;
            }
        }
        
        return uf.getNumOfConnectedComponents() == 1;
    }
}
