/*
Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

Example:
Given a / b = 2.0, b / c = 3.0.
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? .
return [6.0, 0.5, -1.0, 1.0, -1.0 ].

The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

According to the example above:

equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
 

The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.
*/

/* Time: O(V2) Space:O(V) */

class Solution {
    private class Node {
        String s;
        double val;
        Node parent;
        
        public Node(String s) {
            this.s = s;
            this.val = 1.0;
            this.parent = this;
        }
    }
    
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        Map<String, Node> nodes = new HashMap<>();
        
        for (List<String> e : equations) {
            for (String s : e) {
                nodes.put(s, new Node(s));
            }
        }
        
        buildForest(equations, values, nodes);
        int i = 0;
        double[] res = new double[queries.size()];
        
        for (List<String> q : queries) {
            String a = q.get(0);
            String b = q.get(1);
            if (!nodes.containsKey(a) || !nodes.containsKey(b)) {
                res[i] = -1;
            } else {
                Node parentA = find(nodes.get(a));
                Node parentB = find(nodes.get(b));
                if (parentA == parentB) {
                    res[i] = nodes.get(a).val / nodes.get(b).val;
                } else {
                    res[i] = -1;
                }
            }
            i++;
        }
        
        return res;
    }
    
    private void buildForest(List<List<String>> equations, double[] values, Map<String, Node> nodes) {
        int i = 0;
        for (List<String> e : equations) {
            Node a = nodes.get(e.get(0));
            Node b = nodes.get(e.get(1));
            // Why b.val / a.val, not reverse???
            union(a, b, b.val / a.val * values[i], nodes);
            i++;
        }
    }
    
    private Node find(Node a) {
        if (a.parent != a) {
            a.parent = find(a.parent);
        }
        
        return a.parent;
    }
    
    private void union(Node a, Node b, double ratio, Map<String, Node> nodes) {
        for (Node n : nodes.values()) {
            if (find(n) == find(a)) {
                n.val *= ratio;
            }
        }
        Node parentA = find(a);
        Node parentB = find(b);
        parentA.parent = parentB;
    }
}
