/*
In a project, you have a list of required skills req_skills, and a list of people.  The i-th person people[i] contains a list of skills that person has.

Consider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill.  We can represent these teams by the index of each person: for example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3].

Return any sufficient team of the smallest possible size, represented by the index of each person.

You may return the answer in any order.  It is guaranteed an answer exists.

 

Example 1:

Input: req_skills = ["java","nodejs","reactjs"], people = [["java"],["nodejs"],["nodejs","reactjs"]]
Output: [0,2]
Example 2:

Input: req_skills = ["algorithms","math","java","reactjs","csharp","aws"], people = [["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]
Output: [1,2]
 

Constraints:

1 <= req_skills.length <= 16
1 <= people.length <= 60
1 <= people[i].length, req_skills[i].length, people[i][j].length <= 16
Elements of req_skills and people[i] are (respectively) distinct.
req_skills[i][j], people[i][j][k] are lowercase English letters.
Every skill in people[i] is a skill in req_skills.
It is guaranteed a sufficient team exists.

*/

// Hint: No hint, too hard!!!
// Time: O(m*2^n)
// Space: O(2^n)

class Solution {
    public int[] smallestSufficientTeam(String[] req_skills, List<List<String>> people) {
        int m = people.size();
        int n = req_skills.length;
        
        int[] skills = new int[m];
        
        // Store people's skillset using bits.
        // e.g: req_skills = ["java","nodejs","reactjs"], people = [["java"],["nodejs"],["nodejs","reactjs"]]
        // skills = ['1', '10', '1100'] = [1, 2, 6]
        for (int i = 0; i < m; i++) {
            int mask = 0;
            for (String s : people.get(i)) {
                mask |= (1 << find(req_skills, s));
            }
            skills[i] = mask;
        }
        
        // dp[i] := the minimum number of people to reach status i
        int[] dp = new int[1 << n];
        
        // parent[i][0] := the previous status
        // parent[i][1] := the previous to cureent status using ith person
        int[][] parent = new int[1 << n][2];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        
        for (int i = 0; i < m; i++) {
            int k = skills[i];
            if (k == 0) {
                continue;
            }
            for (int j = (1 << n) - 1; j >= 0; j--) {
                // f(i, j | k) = min(f(i - 1, j) + 1, f(i - 1, j | k))
                if (dp[j] != Integer.MAX_VALUE && dp[j] + 1 < dp[j | k]) {
                    dp[j | k] = dp[j] + 1;
                    parent[j | k] = new int[]{j, i};
                }
            }
        }
        
        // Path recover
        int cur = (1 << n) - 1;
        List<Integer> res = new ArrayList<>();
        while (cur > 0) {
            res.add(parent[cur][1]);
            cur = parent[cur][0];
        }
        
        int[] temp = new int[res.size()];
        
        for (int i = 0; i < res.size(); i++) {
            temp[i] = res.get(i);
        }
        
        return temp;
    }
    
    // find the index where s first appears in strs
    private int find(String[] strs, String s) {
        for (int i = 0; i < strs.length; i++) {
            if (strs[i].equals(s)) {
                return i;
            }
        }
        
        return -1;
    }
}
