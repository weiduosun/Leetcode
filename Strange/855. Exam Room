/* In an exam room, there are N seats in a single row, numbered 0, 1, 2, ..., N-1.

When a student enters the room, they must sit in the seat that maximizes the distance to the closest person.  If there are multiple such seats, they sit in the seat with the lowest number.  (Also, if no one is in the room, then the student sits at seat number 0.)

Return a class ExamRoom(int N) that exposes two functions: ExamRoom.seat() returning an int representing what seat the student sat in, and ExamRoom.leave(int p) representing that the student in seat number p now leaves the room.  It is guaranteed that any calls to ExamRoom.leave(p) have a student sitting in seat p.

 

Example 1:

Input: ["ExamRoom","seat","seat","seat","seat","leave","seat"], [[10],[],[],[],[],[4],[]]
Output: [null,0,9,4,2,null,5]
Explanation:
ExamRoom(10) -> null
seat() -> 0, no one is in the room, then the student sits at seat number 0.
seat() -> 9, the student sits at the last seat number 9.
seat() -> 4, the student sits at the last seat number 4.
seat() -> 2, the student sits at the last seat number 2.
leave(4) -> null
seat() -> 5, the student sits at the last seat number 5. */

class ExamRoom {

    private int N;
    
    private class Interval {
        private int x;
        private int y;
        private int dist; /* If the interval is seated, the minimum distance between the seated person and the other. */
        
        public Interval(int x, int y) {
            this.x = x;
            this.y = y;
            if (x == -1) {
                dist = y;
            } else if (y == N) {
                dist = N - 1 - x;
            } else {
                dist = (y - x) / 2;
            }
        }
    }
    
    PriorityQueue<Interval> pq = new PriorityQueue<>(new Comparator<Interval>(){
        public int compare(Interval a, Interval b) {
            return a.dist != b.dist ? b.dist - a.dist : a.x - b.x;
        } 
    });
    
    public ExamRoom(int N) {
        this.N = N;
        pq.offer(new Interval(-1, N));
    }
    
    public int seat() { /* O(nlgn) */
        int seat = 0;
        
        Interval cur = pq.poll();
        if (cur.x == -1) {
            seat = 0;
        } else if (cur.y == N) {
            seat = N - 1;
        } else {
            seat = (cur.y + cur.x) / 2;
        }
        
        pq.offer(new Interval(cur.x, seat));
        pq.offer(new Interval(seat, cur.y));
        
        return seat;
    }
    
    public void leave(int p) { /* O(n) */
        Interval head = null;
        Interval tail = null;
        List<Interval> list = new ArrayList<>(pq);
        
        for (Interval i : list) {
            if (tail == null && i.x == p) {
                tail = i;
            } else if (head == null && i.y == p) {
                head = i;
            }
        }
        
        pq.remove(head);
        pq.remove(tail);
        pq.offer(new Interval(head.x, tail.y));
    }
}

/**
 * Your ExamRoom object will be instantiated and called as such:
 * ExamRoom obj = new ExamRoom(N);
 * int param_1 = obj.seat();
 * obj.leave(p);
 */
