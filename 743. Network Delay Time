/*
There are N network nodes, labelled 1 to N.

Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

 

Example 1:



Input: times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
Output: 2
 

Note:

N will be in the range [1, 100].
K will be in the range [1, N].
The length of times will be in the range [1, 6000].
All edges times[i] = (u, v, w) will have 1 <= u, v <= N and 0 <= w <= 100.
*/

// Hint: Relax edges from smallest to largest
// Time: O(ElgE + V)
// Space: O(E + V)

class Solution {
    private class Node {
        private int target;
        private int cost;
        public Node(int target, int cost) {
            this.target = target;
            this.cost = cost;
        }
    }
    
    public int networkDelayTime(int[][] times, int N, int K) {
        if (times == null || times.length == 0) {
            return 0;
        }
        
        int[] dists = new int[N + 1];
        Arrays.fill(dists, Integer.MAX_VALUE);
        dists[K] = 0;
        PriorityQueue<Node> pq = new PriorityQueue<>((a, b)->(a.cost - b.cost));
        Map<Integer, Set<Node>> map = new HashMap<>();
        
        for (int i = 1; i <= N; i++) {
            map.put(i, new HashSet<>());
        }
        
        for (int[] time : times) {
            map.get(time[0]).add(new Node(time[1], time[2]));
        }
        
        pq.offer(new Node(K, 0));
        
        while (!pq.isEmpty()) {
            Node cur = pq.poll();
            for (Node nei : map.get(cur.target)) {
                if (cur.cost + nei.cost < dists[nei.target]) {
                    dists[nei.target] = cur.cost + nei.cost;
                    pq.offer(new Node(nei.target, cur.cost + nei.cost));
                }
            }
        }
        
        int res = 0;
        for (int i = 1; i <= N; i++) {
            res = Math.max(res, dists[i]);
        }
        
        return res == Integer.MAX_VALUE ? -1 : res; 
    }
}
