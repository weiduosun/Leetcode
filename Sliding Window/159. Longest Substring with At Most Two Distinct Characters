/*
Given a string s , find the length of the longest substring t  that contains at most 2 distinct characters.

Example 1:

Input: "eceba"
Output: 3
Explanation: t is "ece" which its length is 3.
Example 2:

Input: "ccaabbb"
Output: 5
Explanation: t is "aabbb" which its length is 5.

Time: O(n)
Space: O(n)
*/

class Solution {
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        
        int i = 0;
        int j = 0;
        int n = s.length();
        int count = 0;
        int res = 0;
        Map<Character, Integer> map = new HashMap<>();
        
        while (j < n) {
            char r = s.charAt(j);
            map.put(r, map.getOrDefault(r, 0) + 1);
            if (map.get(r) == 1) {
                count++;
            }
            
            while (count > 2) {
                char l = s.charAt(i);
                map.put(l, map.get(l) - 1);
                if (map.get(l) == 0) {
                    count--;
                }
                i++;
            }
            
            res = Math.max(res, j - i + 1);
            j++;
        }
        
        return res;
    }
}
