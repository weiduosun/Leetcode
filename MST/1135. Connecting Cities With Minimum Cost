/*
There are N cities numbered from 1 to N.

You are given connections, where each connections[i] = [city1, city2, cost] represents the cost to connect city1 and city2 together.  (A connection is bidirectional: connecting city1 and city2 is the same as connecting city2 and city1.)

Return the minimum cost so that for every pair of cities, there exists a path of connections (possibly of length 1) that connects those two cities together.  The cost is the sum of the connection costs used. If the task is impossible, return -1.

 

Example 1:



Input: N = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]
Output: 6
Explanation: 
Choosing any 2 edges will connect all cities so we choose the minimum 2.
Example 2:



Input: N = 4, connections = [[1,2,3],[3,4,4]]
Output: -1
Explanation: 
There is no way to connect all cities even if all edges are used.
 

Note:

1 <= N <= 10000
1 <= connections.length <= 10000
1 <= connections[i][0], connections[i][1] <= N
0 <= connections[i][2] <= 10^5
connections[i][0] != connections[i][1]
*/

// Hint: Kruskal's
// Time: O(ElgE+V)
// Space: O(V)

class Solution {
    public class UnionFind {
        private int n;
        private int[] parent;
        private int[] rank;
        
        public UnionFind(int n) {
            this.n = n;
            parent = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
            rank = new int[n];
        }
        
        public int find(int i) {
            if (i != parent[i]) {
                parent[i] = find(parent[i]);
            }
            return parent[i];
        }
        
        public void union(int i, int j) {
            if (rank[i] < rank[j]) {
                parent[i] = j;
            } else if (rank[i] > rank[j]) {
                parent[j] = i;
            } else {
                parent[i] = j;
                rank[j]++;
            }
        }
    }
    
    public int minimumCost(int N, int[][] connections) {
        if (connections == null || connections.length == 0) {
            return 0;
        }
        
        UnionFind uf = new UnionFind(N + 1);
        Arrays.sort(connections, (a, b) -> (a[2] - b[2]));
        int cost = 0;
        
        for (int[] c : connections) {
            int a = uf.find(c[0]);
            int b = uf.find(c[1]);
            if (a != b) {
                uf.union(a, b);
                cost += c[2];
                N--;
                if (N == 1) {
                    break;
                }
            }
        }
        
        // if the MST can be built.
        return N == 1 ? cost : -1;
    }
}

// Hint: Prim's
// Time: O(ElgV+V)
// Space: O(E+V)

class Solution {    
    public int minimumCost(int N, int[][] connections) {
        if (connections == null || connections.length == 0) {
            return 0;
        }
        
        Map<Integer, Set<int[]>> map = new HashMap<>();
        
        for (int i = 1; i <= N; i++) {
            map.put(i, new HashSet<>());
        }
        
        for (int[] c : connections) {
            map.get(c[0]).add(new int[]{c[1], c[2]});
            map.get(c[1]).add(new int[]{c[0], c[2]});
        }
        
        int cost = 0;
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> (a[1] - b[1]));
        for (int[] s : map.get(1)) {
            pq.offer(s);
        }
        
        Set<Integer> set = new HashSet<>();
        set.add(1);
        
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            
            if (set.contains(cur[0])) {
                continue;
            }
            
            set.add(cur[0]);
            cost += cur[1];
            
            if (set.size() == N) {
                return cost;
            }
            
            for (int[] nei : map.get(cur[0])) {
                if (!set.contains(nei[0])) {
                    pq.offer(nei);
                }
            }
        }
        
        return N == set.size() ? cost : -1;
    }
}
