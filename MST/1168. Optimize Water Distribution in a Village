/*
There are n houses in a village. We want to supply water for all the houses by building wells and laying pipes.

For each house i, we can either build a well inside it directly with cost wells[i], or pipe in water from another well to it. The costs to lay pipes between houses are given by the array pipes, where each pipes[i] = [house1, house2, cost] represents the cost to connect house1 and house2 together using a pipe. Connections are bidirectional.

Find the minimum total cost to supply water to all houses.

 

Example 1:



Input: n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]
Output: 3
Explanation: 
The image shows the costs of connecting houses using pipes.
The best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3.
 

Constraints:

1 <= n <= 10000
wells.length == n
0 <= wells[i] <= 10^5
1 <= pipes.length <= 10000
1 <= pipes[i][0], pipes[i][1] <= n
0 <= pipes[i][2] <= 10^5
pipes[i][0] != pipes[i][1]
*/

// Tip: Add a virtual node 0. wells[i] => edge(0, i + 1, wells[i]) 
// Solution 1: Kruskal
// Time: O(ElgE + V) Space: O(E + V)

class Solution {
    class UnionFind {
        int[] rank;
        int[] parent;
        int n;
        
        public UnionFind(int n) {
            this.n = n;
            rank = new int[n];
            parent = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        
        public int find(int i) {
            if (i != parent[i]) {
                parent[i] = find(parent[i]);
            }
            return parent[i];
        }
        
        public void union(int i, int j) {
            if (rank[i] < rank[j]) {
                parent[i] = j;
            } else if (rank[j] < rank[i]) {
                parent[j] = i;
            } else {
                parent[i] = j;
                rank[j]++;
            }
        }
    }
    
    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {
        List<int[]> edges = new ArrayList<>(Arrays.asList(pipes));
        UnionFind uf = new UnionFind(n + 1);
        
        for (int i = 1; i <= n; i++) {
            edges.add(new int[]{0, i, wells[i - 1]});
        }
        
        Collections.sort(edges, (a, b) ->(a[2] - b[2]));
        int cost = 0;
        
        for (int[] e : edges) {
            int a = uf.find(e[0]);
            int b = uf.find(e[1]);
            if (a != b) {
                uf.union(a, b);
                cost += e[2];
            }
        }
        
        return cost;
    }
}

// Solution 2: Prim's
// Time: O(ElgV) Space: O(E + V)
class Solution {
    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {
        Map<Integer, Set<int[]>> map = new HashMap<>();
        Set<Integer> set = new HashSet<>();
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> (a[1] - b[1]));
        
        for (int i = 0; i <= n; i++) {
            map.put(i, new HashSet<>());
        }
        
        for (int i = 1; i <= n; i++) {
            int[] edge = new int[]{i, wells[i - 1]};
            map.get(0).add(edge);
            pq.offer(edge);
        }
        
        for (int[] p : pipes) {
            map.get(p[0]).add(new int[]{p[1], p[2]});
            map.get(p[1]).add(new int[]{p[0], p[2]});
        }
        
        int cost = 0;
        while (!pq.isEmpty()) {
            if (set.size() == n) {
                return cost;
            }
            
            int[] cur = pq.poll();
            
            if (set.contains(cur[0])) {
                continue;
            }
            
            set.add(cur[0]);
            cost += cur[1];
            
            for (int[] nei : map.get(cur[0])) {
                if (!set.contains(nei[0])) {
                    pq.offer(nei);
                }
            }
        }
        
        return cost;
    }
}
