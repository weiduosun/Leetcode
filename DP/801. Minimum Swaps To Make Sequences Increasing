/*
We have two integer sequences A and B of the same non-zero length.

We are allowed to swap elements A[i] and B[i].  Note that both elements are in the same index position in their respective sequences.

At the end of some number of swaps, A and B are both strictly increasing.  (A sequence is strictly increasing if and only if A[0] < A[1] < A[2] < ... < A[A.length - 1].)

Given A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.

Example:
Input: A = [1,3,5,4], B = [1,2,3,7]
Output: 1
Explanation: 
Swap A[3] and B[3].  Then the sequences are:
A = [1, 3, 5, 7] and B = [1, 2, 3, 4]
which are both strictly increasing.
Note:

A, B are arrays with the same length, and that length will be in the range [1, 1000].
A[i], B[i] are integer values in the range [0, 2000].
*/

// Hint: 不知道前一组数有没有换过 -》 加入状态！！！
// Time: O(n)
// Space: O(n)

class Solution {
    public int minSwap(int[] A, int[] B) {
        if (A == null || B == null || A.length != B.length) {
            return 0;
        }
        
        int n = A.length;
        int[][] dp = new int[n + 1][2];
        for (int i = 1; i <= n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        int swappedA = Integer.MIN_VALUE;
        int originalA = Integer.MIN_VALUE;
        int swappedB = Integer.MIN_VALUE;
        int originalB = Integer.MIN_VALUE;
        
        for (int i = 1; i <= n; i++) {
            if (B[i - 1] > originalA && A[i - 1] > originalB && dp[i - 1][0] != Integer.MAX_VALUE) {
                dp[i][1] = Math.min(dp[i][1], dp[i - 1][0] + 1);
            }
            if (B[i - 1] > swappedA && A[i - 1] > swappedB && dp[i - 1][1] != Integer.MAX_VALUE) {
                dp[i][1] = Math.min(dp[i][1], dp[i - 1][1] + 1);
            }
            if (A[i - 1] > originalA && B[i - 1] > originalB && dp[i - 1][0] != Integer.MAX_VALUE) {
                dp[i][0] = Math.min(dp[i][0], dp[i - 1][0]);
            }
            if (A[i - 1] > swappedA && B[i - 1] > swappedB && dp[i - 1][1] != Integer.MAX_VALUE) {
                dp[i][0] = Math.min(dp[i][0], dp[i - 1][1]);
            }
            swappedA = B[i - 1];
            originalA = A[i - 1];
            swappedB = A[i - 1];
            originalB = B[i - 1];
        }
        
        return Math.min(dp[n][0], dp[n][1]) == Integer.MAX_VALUE ? -1 : Math.min(dp[n][0], dp[n][1]);
    }
}
