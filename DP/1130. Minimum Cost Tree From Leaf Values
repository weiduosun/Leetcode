/*
Given an array arr of positive integers, consider all binary trees such that:

Each node has either 0 or 2 children;
The values of arr correspond to the values of each leaf in an in-order traversal of the tree.  (Recall that a node is a leaf if and only if it has 0 children.)
The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.
Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.  It is guaranteed this sum fits into a 32-bit integer.

 

Example 1:

Input: arr = [6,2,4]
Output: 32
Explanation:
There are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.

    24            24
   /  \          /  \
  12   4        6    8
 /  \               / \
6    2             2   4
 

Constraints:

2 <= arr.length <= 40
1 <= arr[i] <= 15
It is guaranteed that the answer fits into a 32-bit signed integer (ie. it is less than 2^31).
*/

// Time: O(n^3) ???
// Space: O(n^2)

class Solution {
    public int mctFromLeafValues(int[] arr) {
        if (arr == null || arr.length == 0) {
            return 0;
        }
        
        int n = arr.length;
        int[][] dp = new int[n][n];
        return dfs(0, n - 1, arr, dp);
    }
    
    private int dfs(int start, int end, int[] arr, int[][] dp) {
        if (start >= end) {
            return 0;
        }
        
        if (dp[start][end] != 0) {
            return dp[start][end];
        }
        
        int res = Integer.MAX_VALUE;
        
        // Why not i <= end?
        // 递归的目的是缩小问题规模，如果i == end，dfs(start, end, arr, dp)会被反复call，导致栈溢出
        for (int i = start; i < end; i++) {
            int left = dfs(start, i, arr, dp);
            int right = dfs(i + 1, end, arr, dp);
            int maxLeft = 0;
            int maxRight = 0;
            for (int j = start; j <= i; j++) {
                maxLeft = Math.max(arr[j], maxLeft);
            }
            for (int j = i + 1; j <= end; j++) {
                maxRight = Math.max(arr[j], maxRight);
            }
            res = Math.min(res, maxLeft * maxRight + left + right);
        }
        
        dp[start][end] = res;
        return res;
    }
}
