/*
Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.  If multiple answers exist, you may return any of them.

(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)

 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
 

Note:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of lowercase English letters.
*/

// 双序列型
// Hint: f(i,j) := the shortest common supersequence of str1.substring(0,i) and str2.substring(0,j)
// Time: O(mn)
// Space: O(mn)

class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        if (str1 == null || str2 == null) {
            return "";
        }
        
        int m = str1.length();
        int n = str2.length();
        
        int[][] dp = new int[m + 1][n + 1];
        
        for (int i = 0; i <= m; i++) {
            dp[i][0] = i;
        }
        
        for (int j = 0; j <= n; j++) {
            dp[0][j] = j;
        }
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;
                }
            }
        }
        
        int p = m;
        int q = n;
        StringBuilder sb = new StringBuilder();
        
        while (p > 0 && q > 0) {
            if (str1.charAt(p - 1) == str2.charAt(q - 1)) {
                sb.append(str1.charAt(p - 1));
                p--;
                q--;
            } else if (dp[p - 1][q] < dp[p][q - 1]) { //要使拼成的字符串尽可能的短，因此希望下降得尽量快些
                sb.append(str1.charAt(p - 1));
                p--;
            } else {
                sb.append(str2.charAt(q - 1));
                q--;
            }
        }
        
        while (p > 0) {
            sb.append(str1.charAt(p - 1));
            p--;
        }
        
        while (q > 0) {
            sb.append(str2.charAt(q - 1));
            q--;
        }
        
        return sb.reverse().toString();
    }
}
