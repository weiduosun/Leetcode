/*

Given two strings text1 and text2, return the length of their longest common subsequence.

A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). A common subsequence of two strings is a subsequence that is common to both strings.

 

If there is no common subsequence, return 0.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length <= 1000
1 <= text2.length <= 1000
The input strings consist of lowercase English characters only.
*/

// 双序列型
// Hint: f(i,j) := LCS of text1.substring(0, i) and text2.substring(0, j)
// Time: O(mn)
// Space: O(mn)

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        if (text1 == null || text2 == null) {
            return 0;
        }
        
        int m = text1.length();
        int n = text2.length();
        int[][] dp = new int[m + 1][n + 1];
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);
                }
            }
        }
        
        // Print one path
        int p = m;
        int q = n;
        StringBuilder res = new StringBuilder();
        while (p > 0 && q > 0) {
            if (text1.charAt(p - 1) == text2.charAt(q - 1)) {
                res.append(text1.charAt(p - 1));
                p--;
                q--;
            } else if (dp[p - 1][q] >= dp[p][q - 1]) { // 不想错过任何一个加入char的机会（第一个if),因此希望尽量下降得慢些
                p--;
            } else {
                q--;
            }
        }
        System.out.println(res.reverse().toString());
        
        return dp[m][n];
    }
}
