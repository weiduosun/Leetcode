/*
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
*/

// Hint: f(i,j) := the minimum numer of operations to convert word1.substring(i) to word2.substring(j)
// Time: O(mn)
// Space: O(mn)

class Solution {
    public int minDistance(String word1, String word2) {
        if (word1 == null || word2 == null) {
            return 0;
        }
        
        int n1 = word1.length();
        int n2 = word2.length();
        int[][] dp = new int[n1 + 1][n2 + 1];
        
        for (int i = 1; i <= n1; i++) {
            dp[i][0] = i;
        }
        
        for (int j = 1; j <= n2; j++) {
            dp[0][j] = j;
        }
        
        for (int i = 1; i <= n1; i++) {
            for (int j = 1; j <= n2; j++) {
                                    //replace w1[i - 1] with w2[j - 1]
                dp[i][j] = Math.min(dp[i - 1][j - 1], 
                                             //add w2[j - 1] at w1[i]
                                    Math.min(dp[i][j - 1], 
                                             //delete w1[i - 1]
                                             dp[i - 1][j])) + 1;
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1]);
                }
            }
        }
        
        return dp[n1][n2];
    }
}
