/*
Description
Given a set of strings which just has lower case letters and a target string, output all the strings for each the edit distance with the target no greater than k.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Have you met this question in a real interview?  
Example
Example 1:

Given words = `["abc", "abd", "abcd", "adc"]` and target = `"ac"`, k = `1`
Return `["abc", "adc"]`
Input:
["abc", "abd", "abcd", "adc"]
"ac"
1
Output:
["abc","adc"]

Explanation:
"abc" remove "b"
"adc" remove "d"
Example 2:

Input:
["acc","abcd","ade","abbcd"]
"abc"
2
Output:
["acc","abcd","ade","abbcd"]

Explanation:
"acc" turns "c" into "b"
"abcd" remove "d"
"ade" turns "d" into "b" turns "e" into "c"
"abbcd" gets rid of "b" and "d"
*/

// Time: O(mn) m is the average length of all strings. n is the number of strings.
// Space: O(26mn)

public class Solution {
    /**
     * @param words: a set of stirngs
     * @param target: a target string
     * @param k: An integer
     * @return: output all the strings that meet the requirements
     */
    public class Node {
        String word;
        Node[] children;
        
        public Node() {
            this.word = null;
            this.children = new Node[26];
        }
        
        public void insert(String s) {
            Node p = this;
            int n = s.length();
        
            for (int i = 0; i < n; i++) {
                char c = s.charAt(i);
                if (p.children[c - 'a'] == null) {
                    p.children[c - 'a'] = new Node();
                }
                p = p.children[c - 'a'];
            }
        
            p.word = s;
        }
    }
    
    public List<String> kDistance(String[] words, String target, int k) {
        // write your code here
        List<String> res = new ArrayList<>();
        
        if (target == null || words == null) {
            return res;
        }
        
        int n = target.length();
        
        int[] dp = new int[n + 1];
        
        for (int i = 0; i <= n; i++) {
            dp[i] = i;
        }
        
        Node root = new Node();
        for (String w : words) {
            root.insert(w);
        }
        
        dfs(res, target, k, root, "", dp);
        
        return res;
    }
    
    private void dfs(List<String> res, String target, int k, 
    Node p, String cur, int[] dp) {
        if (p.word != null) {
            if (dp[target.length()] <= k) {
                res.add(cur);
            }
        }
        
        for (int i = 0; i < 26; i++) {
            if (p.children[i] == null) {
                continue;
            }
            
            int[] nextDp = new int[target.length() + 1];
            nextDp[0] = cur.length() + 1;
            
            for (int j = 1; j <= target.length(); j++) {
                if (target.charAt(j - 1) - 'a' == i) {
                    nextDp[j] = dp[j - 1];
                } else {
                    nextDp[j] = Math.min(nextDp[j - 1], 
                    Math.min(dp[j], dp[j - 1])) + 1;
                }
            }
            
            dfs(res, target, k, p.children[i], cur + (char) (i + 'a'), nextDp);
        }
    }
}
