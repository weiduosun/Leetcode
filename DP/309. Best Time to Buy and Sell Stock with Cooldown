/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:

Input: [1,2,3,0,2]
Output: 3 
Explanation: transactions = [buy, sell, cooldown, buy, sell]
*/

// Hint: hold[i] := the maximum value while holding stock at the ith day
//       unhold[i] := the maximum value while unholding stock at the ith day
// Time: O(n)
// Space: O(n)

class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) {
            return 0;
        }
        
        int n = prices.length;
        int[] hold = new int[n + 1];
        int[] unhold = new int[n + 1];
        //第0天无法持有股票
        hold[0] = Integer.MIN_VALUE;
        
        for (int i = 1; i <= n; i++) {
            if (i > 1) {
                                                // 第i-2天卖出，第i天买入（第i-1天cooldown）。- prices[i - 1]s是第i天买入股票的成本
                hold[i] = Math.max(hold[i - 1], unhold[i - 2] - prices[i - 1]);
            } else {
                hold[i] = Math.max(hold[i - 1], - prices[i - 1]);
            }
            unhold[i] = Math.max(unhold[i - 1], hold[i - 1] + prices[i - 1]);
        }
        
        return unhold[n];
    }
}
