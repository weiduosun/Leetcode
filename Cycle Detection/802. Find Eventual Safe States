/*
In a directed graph, we start at some node and every turn, walk along a directed edge of the graph.  If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.

Now, say our starting node is eventually safe if and only if we must eventually walk to a terminal node.  More specifically, there exists a natural number K so that for any choice of where to walk, we must have stopped at a terminal node in less than K steps.

Which nodes are eventually safe?  Return them as an array in sorted order.

The directed graph has N nodes with labels 0, 1, ..., N-1, where N is the length of graph.  The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph.
*/

// Hint: 0: not visited; 1: on the callstack; 2: visited
// Time: O(n)
// Space: O(n)

class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<Integer> res = new ArrayList<>();
        
        if (graph == null || graph.length == 0) {
            return res;
        }
        
        int n = graph.length;
        int[] visited = new int[n];
        
        for (int i = 0; i < n; i++) {
            if (dfs(i, graph, visited)) {
                res.add(i);
            } 
        }
        
        return res;
    }
    
    private boolean dfs(int i, int[][] graph, int[] visited) {
        visited[i] = 1;
        
        for (int nei : graph[i]) {
            if (visited[nei] == 1) {
                return false;
            }
            // Why not
            // if (visited[nei] == 0) return dfs(nei, graph, visited)
            // 走完for loop, 避免提前return
            if (visited[nei] == 0 && !dfs(nei, graph, visited)) {
                return false;
            }
        }
        
        visited[i] = 2;
        
        return true;
    }
}
