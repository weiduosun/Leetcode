/*
Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.

Example:

Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8
Note:

The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.
*/

class NumArray {
    
    private int[] tree;
    private int[] nums;
    
    // Get the lowest bit
    private int lowbit(int i) {
        return i & (-i);
    }
    
    private void updateTree(int i, int delta) {
        int n = tree.length;
        
        while (i < n) {
            tree[i] += delta;
            i += lowbit(i);
        }
    }
    
    private int queryTree(int i) {
        int res = 0;
        
        while (i >= 1) {
            res += tree[i];
            i -= lowbit(i);
        }
        
        return res;
    }
    
    public NumArray(int[] nums) {
        this.nums = nums;
        int n = nums.length;
        tree = new int[n + 1];
        for (int i = 0; i < n; i++) {
            updateTree(i + 1, nums[i]);
        }
    }
    
    public void update(int i, int val) {
        // delta = val - nums[i]
        updateTree(i + 1, val - nums[i]);
        // renew nums[i]
        nums[i] = val;
    }
    
    public int sumRange(int i, int j) {
        return queryTree(j + 1) - queryTree(i);
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
