/*
Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.

Example:

Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8
Note:

The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.
*/
class NumArray {

    class Node {
        private int start;
        private int end;
        private int sum;
        private Node left;
        private Node right;
        
        public Node(int start, int end, int sum) {
            this.start = start;
            this.end = end;
            this.sum = sum;
        }
        
        public Node(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }
    
    private Node root;
    private int[] nums;
    
    public NumArray(int[] nums) {
        if (nums == null || nums.length == 0) {
            return;
        }
        
        this.nums = nums;
        root = buildTree(0, nums.length - 1);
    }
    
    private Node buildTree(int start, int end) {
        if (start == end) {
            return new Node(start, end, nums[start]);
        }
        
        Node node = new Node(start, end);
        int mid = start + (end - start) / 2;
        node.left = buildTree(start, mid);
        node.right = buildTree(mid + 1, end);
        node.sum = node.left.sum + node.right.sum;
        
        return node;
    }
    
    public void update(int i, int val) {
        updateTree(i, root, val);
    }
    
    private void updateTree(int i, Node root, int val) {
        if (root.start == root.end && root.start == i) {
            root.sum = val;
            return;
        }
        
        int mid = root.start + (root.end - root.start) / 2;
        if (i <= mid) {
            updateTree(i, root.left, val);
        } else {
            updateTree(i, root.right, val);
        }
        root.sum = root.left.sum + root.right.sum;
    }
    
    public int sumRange(int i, int j) {
        return queryTree(i, j, root);
    }
    
    private int queryTree(int i, int j, Node root) {
        if (root.start == i && root.end == j) {
            return root.sum;
        }
        
        int mid = root.start + (root.end - root.start) / 2;
        if (j <= mid) {
            return queryTree(i, j, root.left);
        } else if (i > mid) {
            return queryTree(i, j, root.right);
        } else {
            return queryTree(i, mid, root.left) + queryTree(mid + 1, j, root.right);
        }
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
