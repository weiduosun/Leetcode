/*
Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
*/

/* Time: O(nlgn), Space: O(n + 512) */
class Solution {
    public String frequencySort(String s) {
        if (s == null || s.length() == 0) {
            return s;
        }
        
        int n = s.length();
        int[] table = new int[256];
        
        for (char c : s.toCharArray()) {
            table[c]++;
        }
        
        int[][] frequency = new int[256][2];
        
        for (int i = 0; i < 256; i++) {
            frequency[i][0] = i;
            frequency[i][1] = table[i];
        }
        
        Arrays.sort(frequency, new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                return b[1] - a[1];
            } 
        });
        
        StringBuilder sb = new StringBuilder();
        
        for (int[] f : frequency) {
            for (int i = 0; i < f[1]; i++) {
                sb.append((char) f[0]);
            }
        }
        
        return sb.toString();
    }
}
